.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" Dahsee man page.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.ds appname Dahsee
.ds cmdname dahsee
.ds manname DAHSEE
.ds version 0.1
.ds year 2012
.ds date \*[year]-08-14
.ds authors Pierre Neidhardt
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TH \*[manname] 1 "\*[date]" "\*[appname] \*[version]" "User Commands"
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH NAME
\*[appname] - a D-Bus monitoring tool.
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SYNOPSIS
.
.SY \*[cmdname]
.RI [ FILTER ]
.YS
.
.SY \*[cmdname]
.IR OPTION " [" ARG ]
.YS
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH DESCRIPTION
\*[appname] performs in-depth analysis of D-Bus current status and messages.
You can introspect applications, list all registered names on a bus, or track
messages matching a specific filter. See below for mode details on D-Bus.
.P
The goal is to provide a human readable view over the D-Bus process.
JSON is used internally as data structure as it is easy to read and to parse by
other application. Thus is JSON the default output format.
.P
\*[appname] has two working modes depending on the arguments.
.
.SS Monitor mode
This is the default behaviour, i.e. running \*[cmdname] without arguments.
Optionnaly \*[cmdname] accepts a string as argument which it will use as filter
for messages.
.
.SS Query mode
A single query is performed on the bus and the result is return in the specified
form. See OPTIONS.
.
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH OPTIONS
.TP
.B -a
List activatable bus names.
.TP
.B -d
Daemonize. (Web interface only).
.TP
.B -f
Force overwriting when output file exists.
.TP
.B -h
Print this help.
.TP
.BI -I " NAME"
Return introspection of NAME.
.TP
.BI -L " FILE"
Write log to FILE (default is stderr).
.TP
.B -l
List registered bus names.
.TP
.BI -n " NAME"
Return unique name associated to NAME.
.TP
.BI -o " FILE"
Write output to FILE (default is stdout).
.TP
.BI -p " NAME"
Return PID associated to NAME.
.TP
.BI -u " NAME"
Return UID who owns NAME.
.TP
.B -v
Print version.
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH NOTES
D-Bus specification may be sometimes confusing. So we will take time to clarify
some points here. We assume that you already know the purpose and main mechanism
of D-Bus.
.
.SS
Addresses
There is four different kinds of D-Bus instances:
.TP
.I System bus
One per machine.
It is primarily targeted at hardware and security. It is not meant to interact
with user.
.TP
.I Session bus
One per user session. All desktop applications run by user should connect to this
bus.
.TP
.I Custom bus
It is also possible to initiate a custom bus. It may be needed in some cases
like running a bus in a sandbox environment. It is not recommended for common
usage, since D-Bus primary goal is allowing applications to communicate to each
other.
.TP
.I Direct connection
Two applications may establish a connection between them. Messages are confined
to in-between. No third-party application may catch messages from this bus. This
is also referred as a 'peer-to-peer' connection.
.P
When refering to a specific instance, we speak of an
.I address
in the D-Bus jargon.
.
.
.SS Applications
An application can register on a bus and thus obtain a
.I unique bus name
in the form of ':NUMBER-NUMBER'.
Optionaly the application can request a
.I well-known name
in the form of a reverse domain name, e.g. 'tld.example.app'.
.P

D-Bus
.I objects
are used to designate the very same objects used in application source
code. There are useful to group members together. They are not
mandatory.  An object is defined by a
.I path
for example '/tld/example/app/myobject'. A path should begin with a '/'.  In the
context of D-Bus 'object', 'path', and 'object path' mean the same thing. If a
D-Bus object may refer to an actual application object, they are not strictly
the same thing on a technical point of view.
.
.SS Messages and members
There may be a confusion between members and messages because of some shared
terms. Let us define them properly.
.TP
.I Messages
A message is a data chunk transmitted over D-Bus. There is 4 types of
messages. Using the terms from D-Bus specification:
.RS 8
.IP \(bu 2
.I error
.IP \(bu 2
.I method_call
.IP \(bu 2
.I method_return
.IP \(bu 2
.I signal
.RE
.
.TP
.I Members
A member is a piece of code in an application. Application have members,
independently of D-Bus. From the point of view of D-Bus, there is only 2
different type of members:
.RS 8
.IP \(bu 2
.I method
.IP \(bu 2
.I signal
.RE
.
.P
The confusion arises when we speak of
.I method
and
.I signal
because both can designate a D-Bus message as well as a member of an
application.
.
.RE
.P
In D-Bus jargon, we also speak of
.I member name
which is the name of the method or the signal as it figures in the code of the concerned application.
.
.
.SS Interfaces
Interfaces are used to group members according to a 'contract'. Interfaces have
the same role than in some programming languages. If an application or an
object 'implements an interface', it means that it has all the members specified
by the interface. Thus the application will follow an expected behaviour.
.P
D-Bus provides a good interface example:
.P
.ce 1
org.freedesktop.DBus.Introspectable
.ce 0
.P
This interface has one method 'Introspect' which returns a string. This result
is in fact an XML string containing an exhaustive description of all public
members.  If your application implements this interface, it should have the
corresponding method.
.
.SS Hierarchy
Here follows an overview of D-Bus hierarchy used to refer to a specific member:
.P
.ce 1
address \(-> bus name \(-> object \(-> interface \(-> member
.ce 0
.P
Most of the time, we work on the session bus, so the address can be
omitted. Otherwise you should specify it to prevent confusion.
.
.P
The object is optionnal. In fact, objects may not be used in an application at
all (e.g. in non object-oriented programming language).
.P
The interface is also optionnal. You should use it if the member belongs to a
specific interface.
.P
For both object and interface, they should be specified when available to
prevent name collision, since an application can have several members sharing
the same name, but belonging to different interfaces or objects.
They are optional if there is no ambiguity for the considered application.
.
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH EXAMPLE
Filters are as found in D-Bus specification.
.TP
.EX
.B \*[cmdname] \fB"type='method_call',interface='introspection'"
.EE
Report only messages that are method calls to interface introspection.
.
.SH AUTHORS
Copyright \(co \*[year] \*[authors]
.
.SH SEE ALSO
dbus-monitor(1)
